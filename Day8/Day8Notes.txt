I am having code like this for an application 

App.js 
--------

import React from 'react'
import { useState } from 'react';
import TaskList from './components/TaskList';
import { AddTask } from './components/AddTask';
export default function App() {

  const [tasks, setTasks] = useState([
    { id: 5271, name: "Record React Lectures", completed: true },
    { id: 7825, name: "Edit React Lectures", completed: false },
    { id: 8391, name: "Watch Lectures", completed: false }
  ]);


  return (
    <div className="App">
 
      <AddTask tasks={tasks} setTasks={setTasks} />
      <TaskList title="Random" subtitle="Test" tasks={tasks} setTasks={setTasks} />

    </div>
  )
}

AddTask.js 
-----------
import React from 'react'

import { useState } from 'react';

export const AddTask = ({ tasks, setTasks }) => {

    const [taskValue, setTaskValue] = useState("");
    const [progress, setProgress] = useState(false);

    const handleChange = (event) => {

        setTaskValue(event.target.value)
    }

    const handleReset = () => {
        setTaskValue("");
    }

    const handleDropdown = (event) => {
        setProgress(event.target.value);
    }
    const handleSubmit = (event) => {
        event.preventDefault();
        const task =
        {
            id: Math.floor(Math.random() * 10000),
            name: taskValue,
            completed: Boolean(progress)
        }
        // console.log(task);
        //setTasks(task) // this will give error as it is list so chnaged like this below
        //setTasks([task])// this will override earlier 3 tasks so finally i will write this we have to follow this rule
        setTasks([...tasks, task])
        handleReset();
    }

    return (

        <section className="addtask">

            <form onSubmit={handleSubmit}>

                <input type="text" onChange={handleChange} name="task" id="task" placeholder='enter task name' autoComplete="off"
                    value={taskValue} />
                <select onChange={handleDropdown} value={progress}>
                    <option value="false">Pending</option>
                    <option value="true">Completed</option>
                </select>
                <button type="submit" style={{ background: "blue" }}>Add task</button><br />

                <button onClick={handleReset} className='reset' style={{ background: "blue", color: "white" }} >Reset</button>
            </form>
            <p> {taskValue}</p>
        </section>

    )
}


TaskList.js 
-------------
import { useState } from 'react';
import TaskCard from './TaskCard';


export const TaskList = ({ tasks, setTasks }) => {

    const [show, setShow] = useState(true);
    function handleDelete(id) {
        setTasks(tasks.filter(task => task.id !== id));
    }
    return (
        <section className='tasklist'>
            <ul>
                <div className='header'>
                    <h1>TaskList</h1>
                    <button className='trigger' onClick={() => setShow(!show)}>{show ? "Hide Tasks" : "Show Tasks"}</button>
                </div>
                {show && tasks.map((task) => (
                    <TaskCard key={task.id} task={task} handleDelete={handleDelete} />
                ))}
            </ul>
        </section>
    )
}

export default TaskList


TaskCard.js 
-----------
import React from 'react'

export default function TaskCard(props) {
    return (

        <li key={props.task.id} className={props.task.completed ? "completed" : "incomplete"}>


            <span>{props.task.id} -- {props.task.name}</span>
            <button className='delete' onClick={() => props.handleDelete(props.task.id)} >Delete</button>
        </li>

    )
}


so you can see here i am sending values in the form of props from App.js to TaskList.js and AddTask.js and from TaskList.js 
to TaskCard as well 

so i want to do this using createContext and useContext i dont want to use props here so provide the changes in coding 
for all the files with proper heading 

TaskContext.js 
---------------
// TaskContext.js
import { createContext, useState } from "react";

// Create a context
export const TaskContext = createContext();

// Provider component
export const TaskProvider = ({ children }) => {
    const [tasks, setTasks] = useState([
        { id: 5271, name: "Record React Lectures", completed: true },
        { id: 7825, name: "Edit React Lectures", completed: false },
        { id: 8391, name: "Watch Lectures", completed: false },
    ]);

    // Function to add a new task
    const addTask = (task) => {
        setTasks([...tasks, task]);
    };

    // Function to delete a task
    const deleteTask = (id) => {
        setTasks(tasks.filter((task) => task.id !== id));
    };

    return (
        <TaskContext.Provider value={{ tasks, addTask, deleteTask }}>
            {children}
        </TaskContext.Provider>
    );
};


App.js 
-----------
// App.js
import React from 'react';
import TaskList from './components/TaskList';
import { AddTask } from './components/AddTask';
import { TaskProvider } from './components/TaskContext';

export default function App() {
  return (
    <TaskProvider>
      <div className="App">
        <AddTask />
        <TaskList />
      </div>
    </TaskProvider>
  );
}

TaskList.js 
-----------
// TaskList.js
import { useState, useContext } from 'react';
import TaskCard from './TaskCard';
import { TaskContext } from './TaskContext';

export const TaskList = () => {
    const [show, setShow] = useState(true);
    const { tasks } = useContext(TaskContext);

    return (
        <section className='tasklist'>
            <ul>
                <div className='header'>
                    <h1>Task List</h1>
                    <button className='trigger' onClick={() => setShow(!show)}>
                        {show ? "Hide Tasks" : "Show Tasks"}
                    </button>
                </div>
                {show && tasks.map((task) => (
                    <TaskCard key={task.id} task={task} />
                ))}
            </ul>
        </section>
    );
};

export default TaskList;


TaskCard.js 
----------------
// TaskCard.js
import React, { useContext } from 'react';
import { TaskContext } from './TaskContext';

export default function TaskCard({ task }) {
    const { deleteTask } = useContext(TaskContext);

    return (
        <li key={task.id} className={task.completed ? "completed" : "incomplete"}>
            <span>{task.id} -- {task.name}</span>
            <button className='delete' onClick={() => deleteTask(task.id)}>Delete</button>
        </li>
    );
}


AddTask.js 
-------------
// AddTask.js
import React, { useState, useContext } from 'react';
import { TaskContext } from './TaskContext';

export const AddTask = () => {
    const [taskValue, setTaskValue] = useState("");
    const [progress, setProgress] = useState(false);

    const { addTask } = useContext(TaskContext);

    const handleChange = (event) => {
        setTaskValue(event.target.value);
    };

    const handleReset = () => {
        setTaskValue("");
    };

    const handleDropdown = (event) => {
        setProgress(event.target.value);
    };

    const handleSubmit = (event) => {
        event.preventDefault();
        const task = {
            id: Math.floor(Math.random() * 10000),
            name: taskValue,
            completed: Boolean(progress),
        };
        addTask(task);
        handleReset();
    };

    return (
        <section className="addtask">
            <form onSubmit={handleSubmit}>
                <input type="text" onChange={handleChange} name="task" id="task" placeholder='Enter task name' autoComplete="off" value={taskValue} />
                <select onChange={handleDropdown} value={progress}>
                    <option value="false">Pending</option>
                    <option value="true">Completed</option>
                </select>
                <button type="submit" style={{ background: "blue" }}>Add Task</button><br />
                <button onClick={handleReset} className='reset' style={{ background: "blue", color: "white" }}>Reset</button>
            </form>
            <p>{taskValue}</p>
        </section>
    );
};



Summary of Changes
-------------------
Created a Context (TaskContext.js)

Stores tasks, addTask, and deleteTask functions.

Provides these values to child components.
Wrapped App.js with TaskProvider

This ensures all components can access the task context.

Updated AddTask.js

Removed tasks and setTasks as props.
Used useContext to get addTask.

Updated TaskList.js

Removed tasks and setTasks as props.
Used useContext to get tasks.

Updated TaskCard.js

Removed handleDelete as a prop.
Used useContext to get deleteTask.

Now, all components access the task state directly from the context instead of passing props. This makes the application cleaner, more modular, and easier to maintain. 



Now i am having a counter example like this 


App.js
----------
 
import { useState } from 'react';
import './App.css';


function App() {

  const [count,setCount] = useState(0);

  function handleAdd()
  {
    //count = count + 1;
    console.log(count);
    setCount(count + 1);
  }

  function handleSub()
  {
    setCount(count - 1);
  }

  function handleReset()
  {
    setCount(0);
  }
 

  return (
    <div className="App">

      <div className='box'>

        <p>{count}</p>
        <button onClick={handleAdd} className='add' >ADD</button>
        <button onClick={handleSub} className='sub' >SUB</button>
        <button onClick={handleReset} className='reset' >RESET</button>


      </div>
     
    </div>
  );
}

export default App;


Updated App.js 
-----------------
import { useReducer } from 'react';
import './App.css';

// Reducer function to manage count state
function countReducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    case 'reset':
      return { count: 0 };
    default:
      return state;
  }
}

function App() {
  // useReducer hook initialization
  const [state, dispatch] = useReducer(countReducer, { count: 0 });

  return (
    <div className="App">
      <div className='box'>
        <p>{state.count}</p>
        <button onClick={() => dispatch({ type: 'increment' })} className='add'>ADD</button>
        <button onClick={() => dispatch({ type: 'decrement' })} className='sub'>SUB</button>
        <button onClick={() => dispatch({ type: 'reset' })} className='reset'>RESET</button>
      </div>
    </div>
  );
}

export default App;


Updated App.js 
---------------
Explanation:
useReducer instead of useState:

useReducer takes a reducer function (countReducer) and an initial state ({ count: 0 }).
It returns [state, dispatch], where:
state holds the current state.
dispatch is used to trigger state updates.
Reducer Function (countReducer):

This function determines how the state should change based on the action type (increment, decrement, or reset).
Dispatching Actions:

The dispatch function is used to send action objects { type: 'increment' }, { type: 'decrement' }, or { type: 'reset' }.
This approach makes state management more structured and scalable, especially useful for complex state logic


updated code with payload handling 
----------------------------------

import { useReducer, useState } from 'react';
import './App.css';

// Reducer function to manage count state with payload
function countReducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + action.payload }; // Increment by input value
    case 'decrement':
      return { count: state.count - action.payload }; // Decrement by input value
    case 'reset':
      return { count: 0 }; // Reset to 0
    default:
      return state;
  }
}

function App() {
  // useReducer hook initialization
  const [state, dispatch] = useReducer(countReducer, { count: 0 });

  // Local state to store user input value
  const [inputValue, setInputValue] = useState(1);

  return (
    <div className="App">
      <div className='box'>
        <p>{state.count}</p>
        
        {/* Input field for user to specify increment/decrement value */}
        <input 
          type="number" 
          value={inputValue} 
          onChange={(e) => setInputValue(Number(e.target.value))} 
          className="input-box"
        />
        
        <button onClick={() => dispatch({ type: 'increment', payload: inputValue })} className='add'>
          ADD
        </button>
        
        <button onClick={() => dispatch({ type: 'decrement', payload: inputValue })} className='sub'>
          SUB
        </button>
        
        <button onClick={() => dispatch({ type: 'reset' })} className='reset'>
          RESET
        </button>
      </div>
    </div>
  );
}

export default App;
